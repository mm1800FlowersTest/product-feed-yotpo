# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
# https://circleci.com/docs/2.0/google-container-engine/#setting-up-authentication
version: 2

##### Declare defaults to be used in multiple jobs #####
references:
  java_defaults: &java_defaults
      working_directory: ~/workspace
      docker:
        # Specify the build base image here.    
        #- image: mmosttler/circleci_openjdk_gcloud:8u151-jdk-gcloud-182
        - image: circleci/openjdk:8u151-jdk
      environment:
        # Customize the JVM maximum heap limit
        MAVEN_OPTS: -Xmx3200m

  machine_defaults: &machine_defaults
      working_directory: ~/workspace
      machine:
        enabled: true

  gcloud_defaults: &gcloud_defaults
      working_directory: ~/workspace
      docker:
        - image: mmosttler/circleci_openjdk_gcloud:8u151-jdk-gcloud-182

##### Declare the Jobs #####
jobs:
  build:
    <<: *java_defaults
    steps:            
      - checkout

      # Download and cache application dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: mvn dependency:go-offline
      - save_cache:
          key: v1-dependencies-{{ checksum "pom.xml" }}
          paths:
            - ~/.m2 

      - run: 
          name: Compile
          command: |
            mvn compile
            
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - pom.xml
            - .springBeans
            - Dockerfile
            - src/*
            - target/*
  
  build-image:  
    <<: *machine_defaults
    steps:        
      - attach-workspace:
          at: ~/workspace
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
      - run: 
          name: Package up the compiled/built source.
          command: |
            mvn package spring-boot:repackage -DskipTests=true      
      - run:
          name: connect to gcloud
          command: |
            # retrieve our gcloud service account from the CircleCI environment
            echo $GCP_AUTH_DOCKER > ~/gcp-docker-key.json
            gcloud auth activate-service-account --key-file  ~/gcp-docker-key.json                
      - save_cache:
          key: v1-gcloud-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/.config/gcloud
      - run:
          name: Build new image and push to private container registry
          command: |
            docker build -t gcr.io/product-feed-docker/product-feed-yotpo .
            gcloud docker --authorize-only
            docker push gcr.io/product-feed-docker/product-feed-yotpo:latest

  unit-test:
    <<: *java_defaults
    steps:        
      - attach-workspace:
          at: ~/workspace
      - restore_cache:
          key: v1-dependencies-{{ checksum "pom.xml" }}  
      - run:
          name: Run Unit Tests
          command: mvn test -DskipTests=false
      - run:
          name: Save test results for CircleCI
          command: |
            mkdir -p ~/junit/ 
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit         

  integration-test:
    <<: *java_defaults
    steps:        
      - attach-workspace:
          at: ~/workspace
      - restore_cache:
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - run:
          name: Run Integration Tests
          command: mvn verify
      - run:
          name: Save test results 
          command: |
            mkdir -p ~/junit/ 
            find . -type f -regex ".*/target/failsafe-reports/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit         

  ##### DEPLOYMENT JOBS #####
  deploy-dev:  
    <<: *gcloud_defaults
    steps:        
      - attach-workspace:
          at: ~/workspace
      - restore_cache:
          key: v1-gcloud-{{ .Environment.CIRCLE_SHA1 }}
      - deploy: 
          name: Deploy to DEV
          command: |
            gcloud container clusters get-credentials product-feed --zone us-central1-a --project product-feed-dev
            
            #first check if the pod is already deployed for product-feed-yotpo in the namespace.
            kubectl get pods --namespace=product-feed-processors
            pods=$(kubectl get pods --namespace=product-feed-processors)
            podmatch=$(echo $namespaces | sed -E 's/.*(product-feed-yotpo).*/\1/')
            if [[ "product-feed-yotpo" == $podmatch ]]; then
              deploy_action="update";
            else
              deploy_action="create";
            fi

            echo $deploy_action
            
            if [[ $deploy_action == "create" ]]; then
              kubectl create -f product-feed-yotpo.yaml;
            else
              #kubectl set image deployment/product-feed-yotpo product-feed-yotpo=gcr.io/product-feed-docker/product-feed-yotpo:latest --namespace=product-feed-processors
              echo "update";
            fi
            
            # retrieve our gcloud service account from the CircleCI environment
            #echo $GOOGLE_AUTH | base64 --decode --ignore-garbage > ~/gcp-key.json
            #gcloud auth activate-service-account --key-file  ~/gcp-key.json      
            # set the gcloud config environment like current project
            #gcloud --quiet config set project $GOOGLE_PROJECT_PREFIX-dev1

            #GAE_TAG=$(echo "$CIRCLE_TAG" | sed 's/./\L&/g' | sed 's/[\.\+]/-/g')
            #gcloud app deploy target/appengine-staging/app.yaml --version v$GAE_TAG-$CIRCLE_BUILD_NUM
      - store_artifacts:
          path: ~/.config/gcloud/logs 

  deploy-uat:  
    <<: *gcloud_defaults
    steps:        
      - attach-workspace:
          at: ~/workspace
      - deploy: 
          name: Deploy to UAT
          command: |
            #echo $GOOGLE_AUTH_UAT1 | base64 --decode --ignore-garbage > ~/gcp-key.json
            #gcloud auth activate-service-account --key-file  ~/gcp-key.json      
            #gcloud --quiet config set project $GOOGLE_PROJECT_PREFIX-uat1
  
            #deploy        
            #GAE_TAG=$(echo "$CIRCLE_TAG" | sed 's/./\L&/g' | sed 's/[\.\+]/-/g')
            #gcloud app deploy target/appengine-staging/app.yaml --no-promote --no-stop-previous-version --version v$GAE_TAG-$CIRCLE_BUILD_NUM

  deploy-prod:  
    <<: *gcloud_defaults
    steps:        
      - attach-workspace:
          at: ~/workspace
      - restore_cache:
          key: v1-gcloud-{{ .Environment.CIRCLE_SHA1 }}
      - deploy: 
          name: Deploy to PROD
          command: |
            #echo $GOOGLE_AUTH_PROD | base64 --decode --ignore-garbage > ~/gcp-key.json
            #gcloud auth activate-service-account --key-file  ~/gcp-key.json      
            #gcloud --quiet config set project $GOOGLE_PROJECT_PREFIX-prod

            #GAE_TAG=$(echo "$CIRCLE_TAG" | sed 's/./\L&/g' | sed 's/[\.\+]/-/g')
            #gcloud app deploy target/appengine-staging/app.yaml --no-promote --no-stop-previous-version --version v$GAE_TAG-$CIRCLE_BUILD_NUM

######################
## Define the Job Workflow
######################
workflows:
  version: 2
  build-deploy-promote:
    jobs:    
      - build:
          filters:
            tags:
              only: /.*/
      - build-image:
          filters:
            tags:
              only: /.*/
          requires:
            - build
      - unit-test:
          filters:
            tags:
              only: /.*/
          requires:
            - build
      - integration-test:
          filters:
            tags:
              only: /.*/
          requires:
            - build            

      - deploy-dev:
          filters:
            tags:
              only: /.*/
          requires:
            - build-image
            - unit-test
            - integration-test
            
      - deploy-uat:      
          filters:
            tags:
              only: /^(\d+\.\d+\.\d+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+(uat))?[\^\{\}]*$/
            branches:
              ignore: /.*/
          requires:        
            - unit-test
            - integration-test

      - deploy-loadtest:      
          filters:
            tags:
              only: /^(\d+\.\d+\.\d+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+(loadtest))?[\^\{\}]*$/
            branches:
              ignore: /.*/
          requires:        
            - unit-test
            - integration-test

      - hold-prod:
          type: approval
          filters:
            tags:
              only: /^(\d+\.\d+\.\d+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+(prod))?[\^\{\}]*$/
            branches:
              ignore: /.*/
          requires:
            - unit-test
            - integration-test
      - deploy-prod:
          filters:
            tags:
              only: /^(\d+\.\d+\.\d+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+(prod))?[\^\{\}]*$/
            branches:
              ignore: /.*/
          requires:        
            - hold-prod
